knitr::opts_chunk$set(echo=T)
library(dplyr)
## SECTION 1: Using R to calculate basic summary statistics of a dataset
# As you go through this homework, remember that reading the documentation for a given
# function can be extremely helpful. For windows, you can simply highlight a function
# in rstudio and use f1 to bring up the documentation.
# For much of this homework, we'll be using functions from an in-built R package, dplyr,
# which allows for straightforward data manipulation (dplyr documentation:
# https://dplyr.tidyverse.org/). Please note that dplyr is included in the package
# tidyverse, thus loading tidyverse instead of dplyr will also work.
# For this section, we'll use the heart disease health indicators dataset which contains
# information collected by the CDC obtained from a yearly telephone survey (The Behavioral
# Risk Factor Surveillance System). This data is a selection of responses collected in 2015
# and is available from Kaggle.
# 1. Load in the heart disease health indicators dataset from Sakai into R and print the
# first 10 rows (2 points)
df = read.csv("heart_disease_health_indicators.csv")
print(df[1:10,])
# 2. How many rows and columns are present in the dataset? (2 points)
sz = dim(df)
rows = sz[1]
cols = sz[2]
# 3. Calculate summary statistics for the heart disease dataset.
# Hint: The base function “summary” may be useful. (2 points)
print(summary(df))
# 4. Subset the original dataset into two dataframes, one containing every individual with
# heartDiseaseorAttack of 1 (yes) and another for individuals without record of heart
# disease or attack (0, 'no'). The two subsets should include all of the information from
# the original. The dplyr function filter() is a good way of doing this. You'll notice
# that filter works by cutting rows.You could also use the dplyr select() function to
# subset datasets by their columns. (4 points)
dis = filter(df,HeartDiseaseorAttack == 1)
health = filter(df,HeartDiseaseorAttack == 0)
# 4a. Calculate summary statistics for both datasets you just created. Name three columns
# where the summary statistics appear noticeably different between the two datasets?
# (2 points)
print(summary(dis))
print(summary(health))
# 3 of the most different categories: HighBP, Diabetes, PhysHlth
# 5. How many unique values of the education and income variable are there? Why would the
# education variable be better encoded as a factor rather than a numeric/double? Using a
# for loop, calculate summary statistics for each unique value of education. (7 points)
uniq_edu = length(unique(df[,21]))
uniq_inc = length(unique(df[,22]))
# The education variable would be best encoded as a factor so data scientists using our
# data set would know that it's a categorical variable as opposed to a numerical value
# that could also be used to describe education, such as length in school.
for (x in 1:6) {
print(paste("Summary Statistics for Education Level",as.integer(x),sep = " ", collapse = NULL))
print(summary(filter(df,Education == x)))
}
# 6. How many instances are there of men (sex=0), with education greater than 3 and a
# positive record of heart disease or attack? Feel free to use any function, but filter
# or count may be of interest (5 points)
men = filter(df,Sex == 0)
withEd3 = filter(men,Education>3)
withHeartDisease = filter(withEd3,HeartDiseaseorAttack == 1)
sz2 = dim(withHeartDisease)
rows2 = sz2[1]
print(paste("There are",as.integer(rows2),"instances of men with education greater than three and a positive record of heart disease or attack"))
# 7. When exploring datasets, you may wish to create new categories based on existing
# variables. For example, you may want to explore how the data changes between broad
# education levels. Add an additional column to the dataset that provides an education
# classification based on the education value of the subject. (12 points)
#   1-3 -> HighSchool
#   4-5 -> College
#   6 -> Graduate_or_professional
EdClass = 0
for (i in 1:rows) {
if (df$Education[i] < 4) {
EdClass[i] = 0
} else if (df$Education[i] < 6) {
EdClass[i] = 1
} else {
EdClass[i] = 2
}
}
df$EdClass = EdClass
# 8. Some differences between education level may be intuitive. For example, we may
# suspect that higher educational attainment would correlate with higher incomes.
# Determine whether this is represented in the dataset by comparing the average income
# values across the education levels you just created. Do the same comparison across
# education levels for BMI. For each education level, provide the percent of individuals
# in that group who have a positive record of heart disease or attack.(10 points)
ed0 = filter(df,EdClass == 0)
ed1 = filter(df,EdClass == 1)
ed2 = filter(df,EdClass == 2)
avgInc = 0
avgBMI = 0
perc = 0
for (i in 1:3) {
if (i == 1) {
curDF = ed0
} else if (i == 2) {
curDF = ed1
} else {
curDF = ed2
}
avgInc[i] = mean(curDF$Income)
avgBMI[i] = mean(curDF$BMI)
perc[i] = mean(curDF$HeartDiseaseorAttack*100)
print(paste("Average Income for Education Class",as.integer(i),round(avgInc[i],digits = 2)))
print(paste("Average BMI for Education Class",as.integer(i),round(avgBMI[i],digits = 2)))
print(paste("For Education Class",as.integer(i),"the average percent of people with a positive record for heart disease or attack is",round(perc[i],digits = 2)))
print('')
}
# 9. Sometimes it is necessary to convert chr or strings to factors for use in various
# functions or algorithms. Convert the column you created in question 7 to a factor.
# (3 points)
EdClass = as.factor(EdClass)
df$EdClass = EdClass
# 10. Write a function that selects a group of observations within the data based on an
# age range, education level, and smoking status, then returns the following: (10 points)
#        - Percent of individuals who have had a heart attack or disease
#        - Average BMI for both the positive and negative heart attack/disease groups
#        - Max and min PhysHlth of the selected group
young_college_smokers = function(df) {
young = filter(df,Age<5)
andCollege = filter(young,EdClass == "1" | EdClass == "2")
finalDF = filter(andCollege,Smoker == 1)
percHeartAD = mean(finalDF$HeartDiseaseorAttack) * 100
heartPos = filter(finalDF,HeartDiseaseorAttack == 1)
heartNeg = filter(finalDF,HeartDiseaseorAttack == 0)
heartPosBMI = mean(heartPos$BMI)
heartNegBMI = mean(heartNeg$BMI)
PhysHealthMax = max(finalDF$PhysHlth)
PhysHealthMin = min(finalDF$PhysHlth)
output = list(percHeartAD,heartPosBMI,heartNegBMI,PhysHealthMax,PhysHealthMin)
return(output)
}
young_college_smokers(df)
# Be sure to include a test of your function!
